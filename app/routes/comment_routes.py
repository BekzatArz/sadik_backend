from flask import Blueprint, request, jsonify
from app.extensions import db
from app.models import Comment, User, Event
from datetime import datetime, timedelta
import pytz

comments_bp = Blueprint('comments', __name__)
Kyrgyzstan_tz = pytz.timezone('Asia/Bishkek')


def format_time_ago(timestamp):
    if timestamp.tzinfo is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–∞—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π–º–∑–æ–Ω–µ
        timestamp = Kyrgyzstan_tz.localize(timestamp)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∑–æ–Ω–µ Asia/Bishkek

    now = datetime.now(Kyrgyzstan_tz)
    delta = now - timestamp

    if delta < timedelta(minutes=1):
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif delta < timedelta(hours=1):
        return f"{delta.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    elif delta < timedelta(days=1):
        return f"{delta.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
    elif delta < timedelta(days=30):
        return f"{delta.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    else:
        return timestamp.strftime("%Y-%m-%d")


# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞
@comments_bp.route('/comments', methods=['POST'])
def add_comment():
    data = request.json
    user_id = data.get("user_id")
    event_id = data.get("event_id")
    content = data.get("content")
    parent_id = data.get("parent_id")  # parent_id –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤

    if not user_id or not event_id or not content:
        return jsonify({"error": "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    user = User.query.get(user_id)
    event = Event.query.get(event_id)

    if not user or not event:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–≤–µ—Ç
    comment = Comment(
        user_id=user_id,
        event_id=event_id,
        content=content,
        created_at=datetime.now(Kyrgyzstan_tz),
        parent_id=parent_id
    )
    db.session.add(comment)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É —Å–æ–±—ã—Ç–∏—è
    event.comments_count = (event.comments_count or 0) + 1
    db.session.commit()

    return jsonify({
        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω",
        "comment_id": comment.id,
        "comments_count": event.comments_count
    }), 201


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
@comments_bp.route('/events/<int:event_id>/comments', methods=['GET'])
def get_comments(event_id):
    event = Event.query.get(event_id)
    if not event:
        return jsonify({"error": "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

    comments = db.session.query(
        Comment.id,
        Comment.event_id,
        Comment.user_id,
        Comment.content,
        Comment.created_at,
        User.first_name,
        User.last_name,
        Comment.parent_id
    ).join(User).filter(Comment.event_id == event_id).all()

    # üî• –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ ID
    comments_dict = {c.id: {
        "id": c.id,
        "first_name": c.first_name,
        "last_name": c.last_name,
        "content": c.content,
        "user_id": c.user_id,
        "event_id": c.event_id,
        "created_at": c.created_at.strftime("%Y-%m-%d %H:%M:%S"),
        "time_ago": format_time_ago(c.created_at),
        "parent_id": c.parent_id,
        "replies": []
    } for c in comments}

    # üî• –°—Ç—Ä–æ–∏–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ + –æ—Ç–≤–µ—Ç—ã)
    comments_data = []
    for comment in comments:
        if comment.parent_id:
            # –ï—Å–ª–∏ –µ—Å—Ç—å parent_id, —Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ `replies` —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            parent = comments_dict.get(comment.parent_id)
            if parent:
                parent["replies"].append(comments_dict[comment.id])
        else:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ parent_id
            comments_data.append(comments_dict[comment.id])

    return jsonify({
        "comments_count": len(comments_data),
        "comments": comments_data
    })


@comments_bp.route('/comments/<int:comment_id>', methods=['DELETE'])
def delete_comment(comment_id):
    comment = Comment.query.get(comment_id)
    if not comment:
        return jsonify({"error": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    event = Event.query.get(comment.event_id)

    if comment.parent_id:
        # ‚úÖ –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        db.session.delete(comment)
        comments_removed = 1  # –£–¥–∞–ª–∏–ª—Å—è –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
    else:
        # ‚úÖ –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        comments_removed = db.session.query(Comment).filter(
            (Comment.id == comment_id) | (Comment.parent_id == comment_id)
        ).count()

        # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤—Å–µ –µ–≥–æ –æ—Ç–≤–µ—Ç—ã
        db.session.query(Comment).filter(
            (Comment.id == comment_id) | (Comment.parent_id == comment_id)
        ).delete(synchronize_session=False)

    # üî• –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É —Å–æ–±—ã—Ç–∏—è
    if event and event.comments_count >= comments_removed:
        event.comments_count -= comments_removed

    db.session.commit()

    return jsonify({
        "message": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω",
        "comments_count": event.comments_count
    }), 200
